/*
 * generated by Xtext
 */
package de.wwu.pi.acse.customerDsl.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.wwu.pi.acse.customerDsl.customerDsl.Customer;
import de.wwu.pi.acse.customerDsl.customerDsl.CustomerDb;
import de.wwu.pi.acse.customerDsl.customerDsl.CustomerDslPackage;
import de.wwu.pi.acse.customerDsl.customerDsl.Order;
import de.wwu.pi.acse.customerDsl.customerDsl.POBox;
import de.wwu.pi.acse.customerDsl.customerDsl.Product;
import de.wwu.pi.acse.customerDsl.customerDsl.StreetAddress;
import de.wwu.pi.acse.customerDsl.services.CustomerDslGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CustomerDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CustomerDslGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == CustomerDslPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case CustomerDslPackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case CustomerDslPackage.CUSTOMER_DB:
				sequence_CustomerDb(context, (CustomerDb) semanticObject); 
				return; 
			case CustomerDslPackage.ORDER:
				sequence_Order(context, (Order) semanticObject); 
				return; 
			case CustomerDslPackage.PO_BOX:
				sequence_POBox(context, (POBox) semanticObject); 
				return; 
			case CustomerDslPackage.PRODUCT:
				sequence_Product(context, (Product) semanticObject); 
				return; 
			case CustomerDslPackage.STREET_ADDRESS:
				sequence_StreetAddress(context, (StreetAddress) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (customers+=Customer* orders+=Order* products+=Product*)
	 */
	protected void sequence_CustomerDb(EObject context, CustomerDb semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID fullName=STRING addresses+=Address+)
	 */
	protected void sequence_Customer(EObject context, Customer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID customer=[Customer|ID] address=[Address|ID] channel=OrderChannel?)
	 */
	protected void sequence_Order(EObject context, Order semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID number=INT zip=STRING)
	 */
	protected void sequence_POBox(EObject context, POBox semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CustomerDslPackage.Literals.ADDRESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CustomerDslPackage.Literals.ADDRESS__NAME));
			if(transientValues.isValueTransient(semanticObject, CustomerDslPackage.Literals.ADDRESS__ZIP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CustomerDslPackage.Literals.ADDRESS__ZIP));
			if(transientValues.isValueTransient(semanticObject, CustomerDslPackage.Literals.PO_BOX__NUMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CustomerDslPackage.Literals.PO_BOX__NUMBER));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPOBoxAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPOBoxAccess().getNumberINTTerminalRuleCall_4_0(), semanticObject.getNumber());
		feeder.accept(grammarAccess.getPOBoxAccess().getZipSTRINGTerminalRuleCall_6_0(), semanticObject.getZip());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=STRING? price=INT?)
	 */
	protected void sequence_Product(EObject context, Product semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID street=STRING city=STRING zip=STRING)
	 */
	protected void sequence_StreetAddress(EObject context, StreetAddress semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, CustomerDslPackage.Literals.ADDRESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CustomerDslPackage.Literals.ADDRESS__NAME));
			if(transientValues.isValueTransient(semanticObject, CustomerDslPackage.Literals.ADDRESS__ZIP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CustomerDslPackage.Literals.ADDRESS__ZIP));
			if(transientValues.isValueTransient(semanticObject, CustomerDslPackage.Literals.STREET_ADDRESS__STREET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CustomerDslPackage.Literals.STREET_ADDRESS__STREET));
			if(transientValues.isValueTransient(semanticObject, CustomerDslPackage.Literals.STREET_ADDRESS__CITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CustomerDslPackage.Literals.STREET_ADDRESS__CITY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getStreetAddressAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getStreetAddressAccess().getStreetSTRINGTerminalRuleCall_3_0_1_0(), semanticObject.getStreet());
		feeder.accept(grammarAccess.getStreetAddressAccess().getCitySTRINGTerminalRuleCall_3_1_1_0(), semanticObject.getCity());
		feeder.accept(grammarAccess.getStreetAddressAccess().getZipSTRINGTerminalRuleCall_3_2_1_0(), semanticObject.getZip());
		feeder.finish();
	}
}
